
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000003b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a57  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b1  00000000  00000000  00000eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000523  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00001ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fa  00000000  00000000  000020f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000025f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_1>
   8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_2>
   c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  74:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <EXI_SetCallBack>:
		break;
		case EX_INT1:
		CLR_BIT(GICR,INT1);
		break;
		case EX_INT2:
		CLR_BIT(GICR,INT2);
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	49 f0       	breq	.+18     	; 0x92 <EXI_SetCallBack+0x16>
  80:	18 f0       	brcs	.+6      	; 0x88 <EXI_SetCallBack+0xc>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	59 f0       	breq	.+22     	; 0x9c <EXI_SetCallBack+0x20>
  86:	08 95       	ret
  88:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <INT0_Fptr+0x1>
  8c:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <INT0_Fptr>
  90:	08 95       	ret
  92:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <INT1_Fptr+0x1>
  96:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <INT1_Fptr>
  9a:	08 95       	ret
  9c:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a0:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	08 95       	ret

000000a6 <EXI_Enable>:
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	41 f0       	breq	.+16     	; 0xba <EXI_Enable+0x14>
  aa:	18 f0       	brcs	.+6      	; 0xb2 <EXI_Enable+0xc>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	49 f0       	breq	.+18     	; 0xc2 <EXI_Enable+0x1c>
  b0:	08 95       	ret
  b2:	8b b7       	in	r24, 0x3b	; 59
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	8b bf       	out	0x3b, r24	; 59
  b8:	08 95       	ret
  ba:	8b b7       	in	r24, 0x3b	; 59
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	8b bf       	out	0x3b, r24	; 59
  c0:	08 95       	ret
  c2:	8b b7       	in	r24, 0x3b	; 59
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	8b bf       	out	0x3b, r24	; 59
  c8:	08 95       	ret

000000ca <EXI_TriggerEdge>:
	}
}
/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
	switch(Interrupt){
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	49 f1       	breq	.+82     	; 0x120 <EXI_TriggerEdge+0x56>
  ce:	20 f0       	brcs	.+8      	; 0xd8 <EXI_TriggerEdge+0xe>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	09 f4       	brne	.+2      	; 0xd6 <EXI_TriggerEdge+0xc>
  d4:	49 c0       	rjmp	.+146    	; 0x168 <EXI_TriggerEdge+0x9e>
  d6:	08 95       	ret
		case EX_INT0:
		switch(Edge){
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f0       	breq	.+26     	; 0xf6 <EXI_TriggerEdge+0x2c>
  dc:	28 f0       	brcs	.+10     	; 0xe8 <EXI_TriggerEdge+0x1e>
  de:	62 30       	cpi	r22, 0x02	; 2
  e0:	89 f0       	breq	.+34     	; 0x104 <EXI_TriggerEdge+0x3a>
  e2:	63 30       	cpi	r22, 0x03	; 3
  e4:	b1 f0       	breq	.+44     	; 0x112 <EXI_TriggerEdge+0x48>
  e6:	08 95       	ret
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
  e8:	85 b7       	in	r24, 0x35	; 53
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
  ee:	85 b7       	in	r24, 0x35	; 53
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	85 bf       	out	0x35, r24	; 53
			break;
  f4:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
  f6:	85 b7       	in	r24, 0x35	; 53
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
  fc:	85 b7       	in	r24, 0x35	; 53
  fe:	8d 7f       	andi	r24, 0xFD	; 253
 100:	85 bf       	out	0x35, r24	; 53
			break;
 102:	08 95       	ret
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
 104:	85 b7       	in	r24, 0x35	; 53
 106:	8e 7f       	andi	r24, 0xFE	; 254
 108:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 10a:	85 b7       	in	r24, 0x35	; 53
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	85 bf       	out	0x35, r24	; 53
			break;
 110:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
 112:	85 b7       	in	r24, 0x35	; 53
 114:	81 60       	ori	r24, 0x01	; 1
 116:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 118:	85 b7       	in	r24, 0x35	; 53
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	85 bf       	out	0x35, r24	; 53
			break;
 11e:	08 95       	ret
			
		}
		break;
		case EX_INT1:
		switch(Edge){
 120:	61 30       	cpi	r22, 0x01	; 1
 122:	69 f0       	breq	.+26     	; 0x13e <EXI_TriggerEdge+0x74>
 124:	28 f0       	brcs	.+10     	; 0x130 <EXI_TriggerEdge+0x66>
 126:	62 30       	cpi	r22, 0x02	; 2
 128:	89 f0       	breq	.+34     	; 0x14c <EXI_TriggerEdge+0x82>
 12a:	63 30       	cpi	r22, 0x03	; 3
 12c:	b1 f0       	breq	.+44     	; 0x15a <EXI_TriggerEdge+0x90>
 12e:	08 95       	ret
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
 130:	85 b7       	in	r24, 0x35	; 53
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 136:	85 b7       	in	r24, 0x35	; 53
 138:	87 7f       	andi	r24, 0xF7	; 247
 13a:	85 bf       	out	0x35, r24	; 53
			break;
 13c:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
 13e:	85 b7       	in	r24, 0x35	; 53
 140:	84 60       	ori	r24, 0x04	; 4
 142:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 144:	85 b7       	in	r24, 0x35	; 53
 146:	87 7f       	andi	r24, 0xF7	; 247
 148:	85 bf       	out	0x35, r24	; 53
			break;
 14a:	08 95       	ret
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
 14c:	85 b7       	in	r24, 0x35	; 53
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 152:	85 b7       	in	r24, 0x35	; 53
 154:	88 60       	ori	r24, 0x08	; 8
 156:	85 bf       	out	0x35, r24	; 53
			break;
 158:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
 15a:	85 b7       	in	r24, 0x35	; 53
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 160:	85 b7       	in	r24, 0x35	; 53
 162:	88 60       	ori	r24, 0x08	; 8
 164:	85 bf       	out	0x35, r24	; 53
			break;
 166:	08 95       	ret
			
		}
		break;
		case EX_INT2:
		switch(Edge){
 168:	62 30       	cpi	r22, 0x02	; 2
 16a:	19 f0       	breq	.+6      	; 0x172 <EXI_TriggerEdge+0xa8>
 16c:	63 30       	cpi	r22, 0x03	; 3
 16e:	29 f0       	breq	.+10     	; 0x17a <EXI_TriggerEdge+0xb0>
 170:	08 c0       	rjmp	.+16     	; 0x182 <EXI_TriggerEdge+0xb8>
			case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
 172:	84 b7       	in	r24, 0x34	; 52
 174:	8f 7b       	andi	r24, 0xBF	; 191
 176:	84 bf       	out	0x34, r24	; 52
			break;
 178:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
 17a:	84 b7       	in	r24, 0x34	; 52
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	84 bf       	out	0x34, r24	; 52
			break;
 180:	08 95       	ret
			default:
			CLR_BIT(MCUCSR,ISC2);	
 182:	84 b7       	in	r24, 0x34	; 52
 184:	8f 7b       	andi	r24, 0xBF	; 191
 186:	84 bf       	out	0x34, r24	; 52
 188:	08 95       	ret

0000018a <__vector_1>:
		break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	if (INT0_Fptr!=NULL)
 1ac:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <INT0_Fptr>
 1b0:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <INT0_Fptr+0x1>
 1b4:	30 97       	sbiw	r30, 0x00	; 0
 1b6:	09 f0       	breq	.+2      	; 0x1ba <__vector_1+0x30>
	{
		INT0_Fptr();
 1b8:	09 95       	icall
	}
}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_2>:
ISR(INT1_vect)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	if (INT1_Fptr!=NULL)
 1fe:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <INT1_Fptr>
 202:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <INT1_Fptr+0x1>
 206:	30 97       	sbiw	r30, 0x00	; 0
 208:	09 f0       	breq	.+2      	; 0x20c <__vector_2+0x30>
	{
		INT1_Fptr();
 20a:	09 95       	icall
	}
}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_3>:
ISR(INT2_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
	if (INT2_Fptr!=NULL)
 250:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 254:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 258:	30 97       	sbiw	r30, 0x00	; 0
 25a:	09 f0       	breq	.+2      	; 0x25e <__vector_3+0x30>
	{
		INT2_Fptr();
 25c:	09 95       	icall
	}	
}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <FUN1>:
			PORTD &= ~((1<<5) | (1<<6) | (1<<7)) ;
			_delay_ms(1000);
	}
}
void FUN1(void){
	    PORTD |= 1<<5;
 280:	82 b3       	in	r24, 0x12	; 18
 282:	80 62       	ori	r24, 0x20	; 32
 284:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	89 e6       	ldi	r24, 0x69	; 105
 28a:	98 e1       	ldi	r25, 0x18	; 24
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <FUN1+0xc>
 294:	00 c0       	rjmp	.+0      	; 0x296 <FUN1+0x16>
 296:	00 00       	nop
 298:	08 95       	ret

0000029a <FUN2>:
	   _delay_ms(1000);	
}
void FUN2(void){
		PORTD |= 1<<6;
 29a:	82 b3       	in	r24, 0x12	; 18
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	82 bb       	out	0x12, r24	; 18
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	89 e6       	ldi	r24, 0x69	; 105
 2a4:	98 e1       	ldi	r25, 0x18	; 24
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <FUN2+0xc>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <FUN2+0x16>
 2b0:	00 00       	nop
 2b2:	08 95       	ret

000002b4 <FUN3>:
		_delay_ms(1000);
}
void FUN3(void){
		PORTD |= 1<<7;
 2b4:	82 b3       	in	r24, 0x12	; 18
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	82 bb       	out	0x12, r24	; 18
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	89 e6       	ldi	r24, 0x69	; 105
 2be:	98 e1       	ldi	r25, 0x18	; 24
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <FUN3+0xc>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <FUN3+0x16>
 2ca:	00 00       	nop
 2cc:	08 95       	ret

000002ce <main>:
void FUN2(void);
void FUN3(void);

int main(void)
{
	DDRD = 0b11100000;
 2ce:	80 ee       	ldi	r24, 0xE0	; 224
 2d0:	81 bb       	out	0x11, r24	; 17
	DDRB = 0;
 2d2:	17 ba       	out	0x17, r1	; 23
	PORTD= 0;
 2d4:	12 ba       	out	0x12, r1	; 18
	CGI();
 2d6:	f8 94       	cli
	EXI_TriggerEdge(EX_INT0,ANY_LOGIC_CHANGE);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 65 00 	call	0xca	; 0xca <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT1,RISING_EDGE);
 2e0:	63 e0       	ldi	r22, 0x03	; 3
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 65 00 	call	0xca	; 0xca <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 65 00 	call	0xca	; 0xca <EXI_TriggerEdge>
	EXI_Enable(EX_INT0);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 53 00 	call	0xa6	; 0xa6 <EXI_Enable>
	EXI_Enable(EX_INT1);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 53 00 	call	0xa6	; 0xa6 <EXI_Enable>
	EXI_Enable(EX_INT2);
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 53 00 	call	0xa6	; 0xa6 <EXI_Enable>
	SGI();
 302:	78 94       	sei
	EXI_SetCallBack(EX_INT0,FUN1);
 304:	60 e4       	ldi	r22, 0x40	; 64
 306:	71 e0       	ldi	r23, 0x01	; 1
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 3e 00 	call	0x7c	; 0x7c <EXI_SetCallBack>
	EXI_SetCallBack(EX_INT1,FUN2);
 30e:	6d e4       	ldi	r22, 0x4D	; 77
 310:	71 e0       	ldi	r23, 0x01	; 1
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 3e 00 	call	0x7c	; 0x7c <EXI_SetCallBack>
	EXI_SetCallBack(EX_INT2,FUN3);
 318:	6a e5       	ldi	r22, 0x5A	; 90
 31a:	71 e0       	ldi	r23, 0x01	; 1
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 3e 00 	call	0x7c	; 0x7c <EXI_SetCallBack>
	while(1)
	{
			PORTD &= ~((1<<5) | (1<<6) | (1<<7)) ;
 322:	82 b3       	in	r24, 0x12	; 18
 324:	8f 71       	andi	r24, 0x1F	; 31
 326:	82 bb       	out	0x12, r24	; 18
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	89 e6       	ldi	r24, 0x69	; 105
 32c:	98 e1       	ldi	r25, 0x18	; 24
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x60>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x6a>
 338:	00 00       	nop
 33a:	f3 cf       	rjmp	.-26     	; 0x322 <main+0x54>

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
